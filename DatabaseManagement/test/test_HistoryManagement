import unittest
from unittest.mock import patch, MagicMock
from HistoryManagement import UserHistoryManagement

class TestUserHistoryManagement(unittest.TestCase):
    @patch('UserHistoryManagement.os.getenv')
    @patch('UserHistoryManagement.psycopg2.connect')
    def setUp(self, mock_connect, mock_getenv):
        # Mock environment variable for database password
        mock_getenv.return_value = 'mocked_password'
        # Mock database connection
        self.mock_conn = MagicMock()
        mock_connect.return_value = self.mock_conn
        # Initialize UserHistoryManagement instance for testing
        self.history_manager = UserHistoryManagement()

    def test_initialization(self):
        self.assertIsNotNone(self.history_manager.conn)

    @patch('your_module_name.UserHistoryManagement.insertHistory')
    def test_insert_history(self, mock_insert):
        # Simulate successful insertion
        mock_insert.return_value = None
        self.history_manager.insertHistory('input data', 'summarized data', 'test_user')
        mock_insert.assert_called_once()

    @patch('your_module_name.UserHistoryManagement.retrieveHistory')
    def test_retrieve_history(self, mock_retrieve):
        # Simulate retrieval of user history
        mock_retrieve.return_value = [('1', 'input data', 'summarized data')]
        history = self.history_manager.retrieveHistory('test_user')
        self.assertEqual(len(history), 1)
        mock_retrieve.assert_called_once_with('test_user')

    @patch('your_module_name.UserHistoryManagement.deleteHistory')
    def test_delete_history(self, mock_delete):
        # Simulate successful deletion
        mock_delete.return_value = 'success'
        status = self.history_manager.deleteHistory('test_user', '1')
        self.assertEqual(status, 'success')
        mock_delete.assert_called_once_with('test_user', '1')

    def tearDown(self):
        self.history_manager.conn.close()

if __name__ == '__main__':
    unittest.main()
